(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("Navigo",[],t):"object"==typeof exports?exports.Navigo=t():e.Navigo=t()}(this,function(){return function(e){function t(o){if(n[o])return n[o].exports;var i=n[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(){return!("undefined"==typeof window||!window.history||!window.history.pushState)}function i(e,t,n){this.root=null,this._routes=[],this._useHash=t,this._hash="undefined"==typeof n?"#":n,this._paused=!1,this._destroyed=!1,this._lastRouteResolved=null,this._notFoundHandler=null,this._defaultHandler=null,this._usePushState=!t&&o(),this._onLocationChange=this._onLocationChange.bind(this),this._genericHooks=null,this._historyAPIUpdateMethod="pushState",e?this.root=t?e.replace(/\/$/,"/"+this._hash):e.replace(/\/$/,""):t&&(this.root=this._cLoc().split(this._hash)[0].replace(/\/$/,"/"+this._hash)),this._listen(),this.updatePageLinks()}function s(e){return e instanceof RegExp?e:e.replace(/\/+$/,"").replace(/^\/+/,"^/")}function r(e,t){return 0===t.length?null:e?e.slice(1,e.length).reduce(function(e,n,o){return null===e&&(e={}),e[t[o]]=decodeURIComponent(n),e},null):null}function a(e){var t,n=[];return t=e instanceof RegExp?e:new RegExp(e.replace(i.PARAMETER_REGEXP,function(e,t,o){return n.push(o),i.REPLACE_VARIABLE_REGEXP}).replace(i.WILDCARD_REGEXP,i.REPLACE_WILDCARD)+i.FOLLOWED_BY_SLASH_REGEXP,i.MATCH_REGEXP_FLAGS),{regexp:t,paramNames:n}}function u(e){return e.replace(/\/$/,"").split("/").length}function h(e,t){return u(t)-u(e)}function l(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t.map(function(t){var n=a(s(t.route)),o=n.regexp,i=n.paramNames,u=e.replace(/^\/+/,"/").match(o),h=r(u,i);return!!u&&{match:u,route:t,params:h}}).filter(function(e){return e})}function d(e,t){return l(e,t)[0]||!1}function c(e,t){var n=t.map(function(t){return""===t.route||"*"===t.route?e:e.split(new RegExp(t.route+"($|/)"))[0]}),o=s(e);return n.length>1?n.reduce(function(e,t){return e.length>t.length&&(e=t),e},n[0]):1===n.length?n[0]:o}function f(){return!!("undefined"!=typeof window&&"onhashchange"in window)}function _(e){return e.split(/\?(.*)?$/).slice(1).join("")}function p(e,t,n){var i,s=e,r=function(e){return e.split(/\?(.*)?$/)[0]};return"undefined"==typeof n&&(n="#"),o()&&!t?s=r(e).split(n)[0]:(i=e.split(n),s=r(i.length>1?i[1]:i[0])),s}function v(e,t,n){return t&&"object"===("undefined"==typeof t?"undefined":g(t))?void(t.before?t.before(function(){var o=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];o&&(e(),t.after&&t.after(n))},n):t.after&&(e(),t.after&&t.after(n))):void e()}function R(e,t,n){if(o()&&!t)return!1;if(!e.match(n))return!1;var i=e.split(n);return i.length<2||""===i[1]}Object.defineProperty(t,"__esModule",{value:!0});var g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};i.prototype={helpers:{match:d,root:c,clean:s,getOnlyURL:p},navigate:function(e,t){var n;return e=e||"",this._usePushState?(n=(t?"":this._getRoot()+"/")+e.replace(/^\/+/,"/"),n=n.replace(/([^:])(\/{2,})/g,"$1/"),history[this._historyAPIUpdateMethod]({},"",n),this.resolve()):"undefined"!=typeof window&&(e=e.replace(new RegExp("^"+this._hash),""),window.location.href=window.location.href.replace(/#$/,"").replace(new RegExp(this._hash+".*$"),"")+this._hash+e),this},on:function(){for(var e=this,t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];if("function"==typeof n[0])this._defaultHandler={handler:n[0],hooks:n[1]};else if(n.length>=2)if("/"===n[0]){var i=n[1];"object"===g(n[1])&&(i=n[1].uses),this._defaultHandler={handler:i,hooks:n[2]}}else this._add(n[0],n[1],n[2]);else if("object"===g(n[0])){var s=Object.keys(n[0]).sort(h);s.forEach(function(t){e.on(t,n[0][t])})}return this},off:function(e){return null!==this._defaultHandler&&e===this._defaultHandler.handler?this._defaultHandler=null:null!==this._notFoundHandler&&e===this._notFoundHandler.handler&&(this._notFoundHandler=null),this._routes=this._routes.reduce(function(t,n){return n.handler!==e&&t.push(n),t},[]),this},notFound:function(e,t){return this._notFoundHandler={handler:e,hooks:t},this},resolve:function(e){var t,o,i=this,s=(e||this._cLoc()).replace(this._getRoot(),"");this._useHash&&(s=s.replace(new RegExp("^/"+this._hash),"/"));var r=_(e||this._cLoc()),a=p(s,this._useHash,this._hash);return!this._paused&&(this._lastRouteResolved&&a===this._lastRouteResolved.url&&r===this._lastRouteResolved.query?(this._lastRouteResolved.hooks&&this._lastRouteResolved.hooks.already&&this._lastRouteResolved.hooks.already(this._lastRouteResolved.params),!1):(o=d(a,this._routes))?(this._callLeave(),this._lastRouteResolved={url:a,query:r,hooks:o.route.hooks,params:o.params,name:o.route.name},t=o.route.handler,v(function(){v(function(){o.route.route instanceof RegExp?t.apply(void 0,n(o.match.slice(1,o.match.length))):t(o.params,r)},o.route.hooks,o.params,i._genericHooks)},this._genericHooks,o.params),o):this._defaultHandler&&(""===a||"/"===a||a===this._hash||R(a,this._useHash,this._hash))?(v(function(){v(function(){i._callLeave(),i._lastRouteResolved={url:a,query:r,hooks:i._defaultHandler.hooks},i._defaultHandler.handler(r)},i._defaultHandler.hooks)},this._genericHooks),!0):(this._notFoundHandler&&v(function(){v(function(){i._callLeave(),i._lastRouteResolved={url:a,query:r,hooks:i._notFoundHandler.hooks},i._notFoundHandler.handler(r)},i._notFoundHandler.hooks)},this._genericHooks),!1))},destroy:function(){this._routes=[],this._destroyed=!0,clearTimeout(this._listeningInterval),"undefined"!=typeof window&&(window.removeEventListener("popstate",this._onLocationChange),window.removeEventListener("hashchange",this._onLocationChange))},updatePageLinks:function(){var e=this;"undefined"!=typeof document&&this._findLinks().forEach(function(t){t.hasListenerAttached||(t.addEventListener("click",function(n){var o=e.getLinkPath(t);e._destroyed||(n.preventDefault(),e.navigate(o.replace(/\/+$/,"").replace(/^\/+/,"/")))}),t.hasListenerAttached=!0)})},generate:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this._routes.reduce(function(n,o){var i;if(o.name===e){n=o.route;for(i in t)n=n.toString().replace(":"+i,t[i])}return n},"");return this._useHash?this._hash+n:n},link:function(e){return this._getRoot()+e},pause:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this._paused=e,e?this._historyAPIUpdateMethod="replaceState":this._historyAPIUpdateMethod="pushState"},resume:function(){this.pause(!1)},historyAPIUpdateMethod:function(e){return"undefined"==typeof e?this._historyAPIUpdateMethod:(this._historyAPIUpdateMethod=e,e)},disableIfAPINotAvailable:function(){o()||this.destroy()},lastRouteResolved:function(){return this._lastRouteResolved},getLinkPath:function(e){return e.getAttribute("href")},hooks:function(e){this._genericHooks=e},_add:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return"string"==typeof e&&(e=encodeURI(e)),"object"===("undefined"==typeof t?"undefined":g(t))?this._routes.push({route:e,handler:t.uses,name:t.as,hooks:n||t.hooks}):this._routes.push({route:e,handler:t,hooks:n}),this._add},_getRoot:function(){return null!==this.root?this.root:(this.root=c(this._cLoc().split("?")[0],this._routes),this.root)},_listen:function(){var e=this;if(this._usePushState)window.addEventListener("popstate",this._onLocationChange);else if(f())window.addEventListener("hashchange",this._onLocationChange);else{var t=this._cLoc(),n=void 0,o=void 0;o=function(){n=e._cLoc(),t!==n&&(t=n,e.resolve()),e._listeningInterval=setTimeout(o,200)},o()}},_cLoc:function(){return"undefined"!=typeof window?"undefined"!=typeof window.__NAVIGO_WINDOW_LOCATION_MOCK__?window.__NAVIGO_WINDOW_LOCATION_MOCK__:s(window.location.href):""},_findLinks:function(){return[].slice.call(document.querySelectorAll("[data-navigo]"))},_onLocationChange:function(){this.resolve()},_callLeave:function(){this._lastRouteResolved&&this._lastRouteResolved.hooks&&this._lastRouteResolved.hooks.leave&&this._lastRouteResolved.hooks.leave(this._lastRouteResolved.params)}},i.PARAMETER_REGEXP=/([:*])(\w+)/g,i.WILDCARD_REGEXP=/\*/g,i.REPLACE_VARIABLE_REGEXP="([^/]+)",i.REPLACE_WILDCARD="(?:.*)",i.FOLLOWED_BY_SLASH_REGEXP="(?:/$|$)",i.MATCH_REGEXP_FLAGS="",t["default"]=i,e.exports=t["default"]}])});

},{}],2:[function(require,module,exports){
// if ('serviceWorker' in navigator) {
//   window.addEventListener('load', () => {
//     navigator.serviceWorker.register('./sw.js')
//       .then(register => console.log('SW regitrado!'))
//       .catch(error => console.log(error));
//   });
// }
var router = require('./modules/variables');

var init = require('./modules/init');

var loginByEmail = require('./modules/loginByEmail');

var getAllTweets = require('./modules/getAllTweets');

router.on('/', init).on('/admin', loginByEmail).on('/admin-tweets', getAllTweets).resolve();

},{"./modules/getAllTweets":3,"./modules/init":4,"./modules/loginByEmail":5,"./modules/variables":7}],3:[function(require,module,exports){
function getAllTweets() {
  document.querySelector('main').innerHTML = '';
  var rootDB = firebase.database().ref();
  var users = rootDB.child('users');
  users.once('value', function (snapshot) {
    var userId;
    var userName;
    var userImage;
    var allTweets = [];
    var tweetsByUser = {
      tweetId: '',
      tweetDate: '',
      tweetMessage: '',
      tweetState: '',
      userId: '',
      userName: '',
      userImage: ''
    };
    snapshot.forEach(function (user) {
      userId = user.val().uid;
      userName = user.val().username;
      userImage = user.val().photoURL;
      user.forEach(function (key) {
        if (key.key === 'tweets') {
          key.forEach(function (tweet) {
            tweetsByUser.tweetId = tweet.key;
            tweetsByUser.tweetDate = tweet.val().date;
            tweetsByUser.tweetMessage = tweet.val().message;
            tweetsByUser.tweetState = tweet.val().state;
            tweetsByUser.userId = userId;
            tweetsByUser.userName = userName;
            tweetsByUser.userImage = userImage; // console.log(tweetsByUser);

            allTweets.unshift(Object.assign({}, tweetsByUser));
          });
        }
      });
    }); // console.log(allTweets);

    renderAllTweets(allTweets);
  });
}

function renderAllTweets(userToRender) {
  document.querySelector('header').style.display = 'flex';
  console.log(userToRender);
  userToRender.forEach(function (tweet) {
    var template = '<div class="ows-user-tweets--tweet">';
    template += '<div class="ows-user-tweets--image">';
    template += '<img src="' + tweet.userImage + '" class="ows-user-tweets--image">';
    template += '</img>';
    template += '</div>';
    template += '<div class="ows-user-tweets--details">';
    template += '<div class="ows-user-tweets--date-user">';
    template += '<div class="ows-user-tweets--date">' + new Date(tweet.tweetDate).toLocaleString() + '</div>';
    template += '<div class="ows-user-tweets--user">@' + tweet.userName + '</div>';
    template += '</div>';
    template += '<div class="ows-user-tweets--message">' + tweet.tweetMessage + '</div>';
    template += '<ul class="ows-user-tweets--buttons">';
    template += '<li class="ows-btn-actions"><button id=' + tweet.tweetId + ' name="editTweet" class="btn">editar</button></li>';
    template += '<li class="ows-btn-actions"><button id=' + tweet.tweetId + ' name="publishTweet" class="btn">publicar</button></li>';
    template += '<li class="ows-btn-actions"><button id=' + tweet.tweetId + ' name="rejectTweet" class="btn">rechazar</button></li>';
    template += '</ul>';
    template += '</div>';
    template += '</div>'; // template += '</div>';

    document.querySelector('main').insertAdjacentHTML('afterbegin', template);
  });
  document.querySelector('main').addEventListener('click', function (event) {
    if (event.target.tagName === 'BUTTON' && event.target.name === 'editTweet') {
      editTweet(event);
    } else if (event.target.tagName === 'BUTTON' && event.target.name === 'publishTweet') {
      publishTweet(event);
    } else if (event.target.tagName === 'BUTTON' && event.target.name === 'rejectTweet') {
      rejectTweet(event);
    }
  }, false);
}

module.exports = getAllTweets;

},{}],4:[function(require,module,exports){
var router = require('./variables');

var utils = require('./utils');

var main = document.querySelector('main');

function init() {
  firebase.auth().getRedirectResult().then(function (result) {
    if (result.user !== null) {
      if (result.additionalUserInfo.isNewUser) {
        saveUser(result);
      } else {
        console.log('ya está en la base de datos');
      }
    }
  }).catch(function (error) {
    console.log('error', error); // Handle Errors here.

    var errorCode = error.code;
    var errorMessage = error.message; // The email of the user's account used.

    var email = error.email; // The firebase.auth.AuthCredential type that was used.

    var credential = error.credential; // ...
  });
  firebase.auth().onAuthStateChanged(function (user) {
    if (user) {
      if (user.uid === '8TCSD9FPoTh2RqDwq98cZQhMuIn2') {
        utils.toggleHeader(user);
        return;
      }

      utils.getMyTweets();
      utils.toggleHeader(user);
      var template = "\n          <div class=\"main-container\">\n            <div class=\"main-container--tweet\">\n              <div class=\"main-textarea\">\n                <div id=\"tweet\" name=\"tweet\" placeholder=\"tu tweet...\" contentEditable=\"true\"></div>\n              </div>\n\n              <button id=\"main-container--tweet-send-tweet\">Enviar tweet</button>\n            </div>\n          </div>\n        ";
      main.insertAdjacentHTML('afterbegin', template);
      document.querySelector('#tweet').addEventListener('keyup', utils.limitChars, false);
      document.querySelector('#main-container--tweet-send-tweet').addEventListener('click', utils.sendTweet, false);
    } else {
      router.navigate('/');
      document.querySelector('header').style.display = 'none';
      document.querySelector('footer').style.display = 'none';
      document.querySelector('main').innerHTML = '';
      var _template = "\n        <div class=\"main-container\">\n          <div class=\"main-container--div\">\n            <div class=\"main-container--div--logo\">\n              <img src=\"./../src/img/icons/icon-72x72.png\" />\n            </div>\n            <button class=\"main-container--div--btn-twitter\">Login con Twitter</button>\n            <p id=\"admin-checkbox\"><a href=\"/#!/admin\">\xBFEres admin?</a></p>\n          </div>\n        </div>\n        ";
      main.insertAdjacentHTML('afterbegin', _template);
      document.querySelector('.main-container button').addEventListener('click', utils.loginByTwitter, false);
      document.querySelector('#admin-checkbox').addEventListener('click', utils.goToAdmin, false);
    }
  });
}

module.exports = init;

},{"./utils":6,"./variables":7}],5:[function(require,module,exports){
var utils = require('./utils');

function loginByEmail() {
  document.querySelector('header #header-welcome').style.display = 'none';
  document.querySelector('main').innerHTML = '';
  var template = '';
  template = "\n  <div class=\"main-container\">\n    <div class=\"main-container--div\">\n      <div class=\"main-container--div--logo\">\n        <img src=\"./../src/img/icons/icon-72x72.png\" />\n      </div>\n\n      <div id=\"ows-login\">\n        <input id=\"login-email\" type=\"text\" placeholder=\"correo electr\xF3nico\"/>\n        <input id=\"login-password\" type=\"password\" placeholder=\"contrase\xF1a\"/>\n        <a href=\"#\" id=\"login-login\">ENTRAR</a>\n      </div>\n    </div>\n  </div>\n  ";
  document.querySelector('main').insertAdjacentHTML('afterbegin', template);
  document.querySelector('#login-login').addEventListener('click', utils.login, false);
}

module.exports = loginByEmail;

},{"./utils":6}],6:[function(require,module,exports){
var router = require('./variables');

var rootDB = firebase.database().ref();
var users = rootDB.child('users');

function goToAdmin(event) {
  if (event.target.checked) {
    router.navigate("/admin");
  }
}

function login() {
  var email = document.querySelector('#login-email').value;
  var password = document.querySelector('#login-password').value;
  firebase.auth().signInWithEmailAndPassword(email, password).then(function (data) {
    router.navigate("/admin-tweets/");
  }).catch(function (error) {
    console.log(error);
  });
}

function loginByTwitter() {
  var provider = new firebase.auth.TwitterAuthProvider();
  firebase.auth().signInWithRedirect(provider);
}

function getMyTweets() {
  users.on('value', function (snapshot) {
    snapshot.forEach(function (user) {
      var myTweets = [];
      user.forEach(function (key) {
        if (key.key === 'tweets') {
          key.forEach(function (tweet) {
            myTweets.unshift({
              date: tweet.val().date,
              message: tweet.val().message,
              state: tweet.val().state
            });
          });
          renderMyTweets(myTweets);
        }
      });
    });
  });
}

function toggleHeader(user) {
  if (user.uid !== '8TCSD9FPoTh2RqDwq98cZQhMuIn2') {
    document.querySelector('header #header-welcome').style.display = 'flex';
    document.querySelector('#header-user--username').textContent = user.displayName;
    document.querySelector('header #header-welcome .header-avatar img').setAttribute('src', user.photoURL); // document.querySelector('.header-avatar').appendChild(img);

    document.querySelector('.header-user--logout button').addEventListener('click', logOut, false);
  } else {
    document.querySelector('header #header-welcome').style.display = 'flex';
    var adorableImg = "https://api.adorable.io/avatars/48/".concat(user.email);
    document.querySelector('#header-user--username').textContent = 'ADMIN';
    document.querySelector('header #header-welcome .header-avatar img').setAttribute('src', adorableImg); // document.querySelector('.header-avatar').appendChild(img);

    document.querySelector('.header-user--logout button').addEventListener('click', logOut, false);
  }
}

function renderMyTweets(myTweets) {
  if (document.querySelector('.container-tweets')) {
    document.querySelector('.container-tweets').innerHTML = '';
  }

  var template = '<div class="container-tweets">';
  template += '<ul>';
  myTweets.forEach(function (tweet) {
    template += '<li>';
    template += '<p>' + tweet.message + '</p>';
    template += '<div class="container-tweets-details">';
    template += '<div class="container-tweets-details-date">' + new Date(tweet.date).toLocaleString() + '</div>';
    template += '<div class="container-tweets-details-state"><span class="container-tweets-details-state-">Estado:</span> ' + isTweetPublished(tweet.state) + '</div>';
    template += '</div>';
    template += '</li>';
  });
  template += '</ul>';
  template += '</div>';
  document.querySelector('.main-container').insertAdjacentHTML('afterend', template);
}

function isTweetPublished(state) {
  if (state === '') {
    return 'Pendiente';
  } else if (state === true) {
    return 'Aprobado';
  } else if (state === false) {
    return 'Rechazado';
  }
}

function logOut() {
  document.querySelector('main').innerHTML = '';
  firebase.auth().signOut();
  router.navigate('/');
}
/**
   * https://codepen.io/gtb104/pen/pztgH
   * @param {*} event
   */


function limitChars(event) {
  // console.log(event.target.innerText.length);
  var text = event.target.innerText;

  if (event.keyCode !== 37 && event.keyCode !== 38 && event.keyCode !== 39 && event.keyCode !== 40) {
    if (text.length > 279) {
      var textarea = document.querySelector('#tweet');
      var textExtra = text.slice(0, 279);
      var newString = "".concat(textExtra, "<span class=\"tweet-error\">").concat(text.slice(279), "</span>");
      event.target.innerHTML = newString;
      range = document.createRange();
      range.selectNodeContents(textarea);
      range.collapse(false);
      selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
      document.querySelector('#send-tweet').disabled = true;
    } else {
      document.querySelector('#send-tweet').disabled = false;
    }
  }
}

function sendTweet() {
  var textArea = document.querySelector('#tweet');
  uid = firebase.auth().currentUser.uid;
  var user = users.child(uid);
  var tweets = user.child('tweets');
  var tweet = tweets.push();
  tweet.update({
    message: textArea.textContent,
    date: new Date().getTime(),
    state: ''
  });
  textArea.textContent = '';
  getMyTweets();
}

module.exports = {
  goToAdmin: goToAdmin,
  login: login,
  loginByTwitter: loginByTwitter,
  getMyTweets: getMyTweets,
  toggleHeader: toggleHeader,
  limitChars: limitChars,
  sendTweet: sendTweet
};

},{"./variables":7}],7:[function(require,module,exports){
var Navigo = require('navigo');

var root = null;
var useHash = true; // Defaults to: false

var hash = '#!'; // Defaults to: '#'

var router = new Navigo(root, useHash, hash);
module.exports = router;

},{"navigo":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
